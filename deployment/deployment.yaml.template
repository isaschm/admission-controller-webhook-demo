apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: webhook-cert-issuer
  namespace: webhook-demo
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: webhook-cert
  namespace: webhook-demo
spec:
  secretName: "webhook-server-tls"
  dnsNames:
  - "*.webhook-demo.svc.cluster.local"
  - "*.webhook-demo.svc"
  - "*.webhook-demo"
  issuerRef:
    name: webhook-cert-issuer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-server
  namespace: webhook-demo
  labels:
    app: webhook-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook-server
  template:
    metadata:
      labels:
        app: webhook-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1234
      containers:
      - name: server
        image: isabel3000/webhook-demo:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8443
          name: webhook-api
        volumeMounts:
        - name: webhook-tls-certs
          mountPath: /run/secrets/tls
          readOnly: true
      volumes:
      - name: webhook-tls-certs
        secret:
          secretName: webhook-server-tls
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-server
  namespace: webhook-demo
spec:
  selector:
    app: webhook-server
  ports:
  - port: 443
    targetPort: webhook-api
---
apiVersion: admissionregistration.k8s.io/v1
roleRef: webhook-server-cluster-role
kind: MutatingWebhookConfiguration
metadata:
  name: demo-webhook
  annotations:
    cert-manager.io/inject-ca-from: webhook-demo/webhook-cert
webhooks:
- name: webhook-server.webhook-demo.svc
  failurePolicy: Fail
  sideEffects: None
  admissionReviewVersions: ["v1"]
  clientConfig:
    service:
      name: webhook-server
      namespace: webhook-demo
      path: "/mutate"
  rules:
  - operations: ["CREATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: webhook-server-cluster-role
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "watch", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["update"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: webhook-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: webhook-server-binding
subjects:
- kind: ServiceAccount
  name: webhook-server
  namespace: webhook-demo
roleRef:
  kind: ClusterRole
  name: webhook-server-cluster-role
  apiGroup: rbac.authorization.k8s.io
